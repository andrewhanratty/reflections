What happens when you initialize a repository? Why do you need to do it?
  You create a repository that contains whatever files currently exist in your
  directory. This is created so that you can now begin to track the different
  changes you make to your files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area gives the developer a chance to add or subtract files before
  making the commit. He/She might change their minds about what they want to
  include as they work.

How can you use the staging area to make sure you have one commit per logical
change?
  You can compare your changes between the working directory and the staging
  area to see the differences, if there are any. Then you have the option of
  adding or removing files from the staging area before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Branches are helpful when you want to experiment with the project while
  keeping the current code and functionality intact. You can also later merge
  branches so that all of the tested improvements you make can be applied
  to create a new Master branch.

How do the diagrams help you visualize the branch structure?
  Since the structure can get pretty complex over time, these diagrams help
  you to see when branches were created and from which branch they initially
  spawned.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  Merging two branches takes all of the changes that occurred within each and
  combines them into one updated branch. This appears as a new branch now,
  although it may be labeled with the same name as a previous branch (such as
  'Master'). 'git log' will show all of the commits from both previous branches,
  so now you can delete the unused branch.
  
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
